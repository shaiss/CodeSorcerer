1. License Minting & IP Registration Process

+---------------------+     +----------------------+     +-------------------------+
| Application/Agent   |     | ATCPIPProvider       |     | Story Protocol          |
| generates content   +---->| prepares license     +---->| mintAndRegisterIpAsset  |
| (asset/intelligence)|     | terms & metadata     |     | WithPilTerms API        |
+---------------------+     +----------------------+     +-------------------------+
                                                                     |
+---------------------+     +----------------------+     +-------------------------+
| License verified    |<----+ License ID returned  |<----+ IP registered on-chain  |
| & stored with data  |     | to application       |     | with metadata & terms   |
+---------------------+     +----------------------+     +-------------------------+


Description: This diagram outlines how intellectual property is registered and licensed within the AVA Portfolio Manager system. The process begins when an agent generates content (like trading insights or portfolio analyses). The ATCP/IP Provider prepares appropriate license terms and metadata before sending them to Story Protocol's smart contracts through the mintAndRegisterIpAssetWithPilTerms API. After successful on-chain registration, a license ID is returned and stored alongside the original data, creating a permanent link between content and its corresponding IP rights. This enables proper attribution and royalty distribution for AI-generated insights.


2. Hybrid Storage Process (Write) 

+---------------+     +---------------------+     +---------------------+
| Agent/Service |     | HybridStorage.store |     | Attempt EthStorage  |
| writes data   +---->| with key & data     +---->| on QuarkChain L2    |
+---------------+     +---------------------+     | as primary option   |
                                                  +---------------------+
                                                            |
                                                     +------+-------+
                                                     | Success?     |
                                                     +------+-------+
                                                   Yes |    | No (Fallback)
                                                       v    v
+---------------+      +--------------------+     +--------------------+
| Storage       |      | Return success     |<----+ Try RecallStorage  |
| complete      |<-----+ to caller          |     | as fallback        |
+---------------+      +--------------------+     +--------------------+
                                                            |
                                                     +------+-------+
                                                     | Success?     |
                                                     +------+-------+
                                                   Yes |    | No
                                                       v    v
                                                  +--------------------+
                                                  | Return error to    |
                                                  | calling service    |
                                                  +--------------------+



This diagram illustrates the data writing pathway in the Hybrid Storage system. When an agent needs to store data, it first attempts to use EthStorage on QuarkChain's L2 as the primary storage solution. The system checks if this storage attempt is successful. If successful, the operation completes; if not, the system falls back to RecallStorage. This design ensures data persistence even when one storage provider experiences issues, creating a robust decentralized storage architecture that benefits from both EthStorage's on-chain durability and Recall's efficiency.


3. Hybrid Storage Process (Read)

+---------------+     +----------------------+     +----------------------+
| Agent/Service |     | HybridStorage.      |     | Attempt RecallStorage |
| requests data +---->| retrieve with key   +---->| retrieval first      |
+---------------+     +----------------------+     +----------------------+
                                                             |
                                                      +------+-------+
                                                      | Success?     |
                                                      +------+-------+
                                                    Yes |    | No (Fallback)
                                                        v    v
+---------------+     +---------------------+     +----------------------+
| Return data   |<----+ Parse & return      |<----+ Try EthStorage      |
| to caller     |     | data with metadata  |     | FlatDirectory       |
+---------------+     +---------------------+     +----------------------+
                                                             |
                                                      +------+-------+
                                                      | Success?     |
                                                      +------+-------+
                                                    Yes |    | No (Last Resort)
                                                        v    v
                                                   +----------------------+
                                                   | Attempt RecallStorage|
                                                   | one more time        |
                                                   +----------------------+


Description: This diagram depicts how data is retrieved in the Hybrid Storage system. When an agent requests data, the system first attempts to retrieve it from RecallStorage. If successful, the data and its metadata are returned to the caller. If RecallStorage fails, the system falls back to EthStorage's FlatDirectory structure on QuarkChain L2. If that also fails, it makes one final attempt with RecallStorage before giving up. This multi-layered approach ensures maximum data availability while balancing speed and cost considerations across different storage options.


4. EigenLayer Portfolio Validation Process


+---------------------+     +----------------------+     +------------------------+
| Portfolio task      |     | PortfolioValidation  |     | Task broadcasted to    |
| created by user     +---->| ServiceManager       +---->| registered operators   |
| or automation       |     | createPortfolioTask  |     |                        |
+---------------------+     +----------------------+     +------------------------+
                                                                     |
                                                                     v
+---------------------+     +----------------------+     +------------------------+
| Task validation     |<----+ Validations verified |<----+ Operators submit       |
| results available   |     | and aggregated       |     | signed validations     |
+---------------------+     +----------------------+     +------------------------+


Description: This diagram demonstrates how portfolio tasks are validated through EigenLayer's restaking mechanism. The process begins when a portfolio task is created by a user or an automated system, which is processed through the PortfolioValidationServiceManager contract. This contract broadcasts the task to registered operators who have staked ETH through EigenLayer. These operators analyze the portfolio task and submit their signed validations back to the contract. The contract verifies these signatures, aggregates the validations, and makes the final validation results available. This decentralized validation approach ensures high integrity for portfolio operations while leveraging EigenLayer's security guarantees.

5. Royalty Management Process

+---------------------+     +----------------------+     +------------------------+
| IP usage detected   |     | ATCPIPProvider      |     | Story Protocol         |
| (derivative work)   +---->| payRoyalties        +---->| Royalty distribution   |
+---------------------+     +----------------------+     +------------------------+
                                                                    |
                                                                    v
+---------------------+     +----------------------+     +------------------------+
| Royalty payment     |<----+ Transaction receipt  |<----+ Royalties distributed  |
| confirmed to user   |     | returned             |     | to IP holders          |
+---------------------+     +----------------------+     +------------------------+

Description: This diagram outlines how intellectual property royalties are managed within the AVA system. When the system detects IP usage (such as a derivative work based on previous agent outputs), the ATCP/IP Provider initiates a royalty payment through the Story Protocol infrastructure. The protocol's smart contracts then distribute these royalties to the appropriate IP holders based on the license terms. Once the distribution is complete, a transaction receipt is returned, and the royalty payment is confirmed to the user. This mechanism ensures fair compensation for intellectual property creators within the ecosystem.


6. ChainOfThought (CoT) Storage Process


+---------------------+     +---------------------+     +-------------------------+
| Agent generates     |     | CoT logs collected  |     | Batched in JSONL format |
| chain of thought    +---->| in memory buffer    +---->| with metadata           |
+---------------------+     +---------------------+     +-------------------------+
                                                                    |
                                                                    v
+---------------------+     +---------------------+     +-------------------------+
| CoT batch stored    |<----+ RecallService       |<----+ Batch registered as IP  |
| for future retrieval|     | stores batch        |     | with Story Protocol     |
+---------------------+     +---------------------+     +-------------------------+

Description: This diagram illustrates how agent reasoning processes are preserved in the system. As agents generate their chain of thought reasoning, these logs are collected in a memory buffer. When sufficient logs are accumulated, they are batched in JSONL format with appropriate metadata. The system then registers this batch as intellectual property with Story Protocol (assigning proper attribution and licensing) and stores it through the RecallService for future retrieval. This process creates a permanent, attributed record of agent reasoning that can be used for auditing, improving agent performance, or sharing insights across the ecosystem.
Each diagram represents a critical process within the AVA Portfolio Manager system, showing how it integrates multiple blockchain technologies to create a comprehensive solution with robust storage, licensing, and cross-chain capabilities.