"""
Markdown reporter for audit results.

This module implements a reporter that generates a Markdown report from audit results.
"""

import logging
import os
from datetime import datetime
from typing import Dict, List, Tuple, Optional, Any


class MarkdownReporter:
    """
    Reporter that generates Markdown reports from audit results.
    """
    
    def __init__(self):
        """
        Initialize the Markdown reporter.
        """
        self.logger = logging.getLogger(__name__)

    def generate_report(
        self,
        repo_path: str,
        branch: str,
        results: Dict[str, Dict],
        total_score: int,
        total_possible: int,
        output_path: str,
        metadata: dict = None,
    ) -> None:
        """
        Generate a Markdown report from audit results.
        
        Args:
            repo_path: Path to the repository
            branch: Branch name
            results: Dictionary mapping category names to dictionaries containing score, max_points, and feedback
            total_score: Total score
            total_possible: Total possible score
            output_path: Path to write the report to
            metadata: Optional repository metadata dictionary
        """
        self.logger.info(f"Generating Markdown report to {output_path}")
        
        # Calculate percentage score
        percentage = (total_score / total_possible) * 100 if total_possible > 0 else 0
        
        # Determine overall rating
        rating = self._get_rating(percentage)
        
        # Get repository basename
        repo_basename = os.path.basename(repo_path)
        repo_name = repo_basename
        
        # Generate report header
        report = [
            f"# NEAR Hackathon Project Audit Report",
            f"",
        ]
        
        # Add repository metadata if available
        if metadata:
            # Use metadata for repo name if available
            if metadata.get("repo_name"):
                repo_name = metadata["repo_name"]
                
            # Add repository header with enhanced metadata
            report.extend([
                f"## Repository Information",
                f"",
            ])
            
            # Add description if available
            if metadata.get("description"):
                report.append(f"**Description:** {metadata['description']}")
                report.append(f"")
            
            # Add owner if available (with avatar)
            if metadata.get("owner"):
                report.append(f"**Owner:** {metadata['owner']}")
                report.append(f"")
                
            # Add avatar if available
            if metadata.get("avatar_url"):
                report.append(f"![Repository Owner Avatar]({metadata['avatar_url']})")
                report.append(f"")
            
            # Add repository details
            report.extend([
                f"**Repository:** `{repo_name}`",
                f"**Path:** `{repo_path}`",
                f"**Branch:** `{branch}`",
            ])
            
            # Add default branch info if available and different from current branch
            if metadata.get("default_branch") and metadata["default_branch"] != branch:
                report.append(f"**Default Branch:** `{metadata['default_branch']}`")
            
            # Add source URL if available (for GitHub repositories)
            if metadata.get("source_url"):
                report.append(f"**Source:** [{metadata['source_url']}]({metadata['source_url']})")
            
            # Add commit info if available
            if metadata.get("commits"):
                report.append(f"**Total Commits:** {metadata['commits']}")
                
            # Add last commit date if available
            if metadata.get("last_commit_date"):
                report.append(f"**Last Commit:** {metadata['last_commit_date']}")
                
            # Add contributor information if available
            if metadata.get("contributors") and len(metadata["contributors"]) > 0:
                report.append(f"**Contributors:** {len(metadata['contributors'])}")
                # List up to 5 contributors
                for i, contributor in enumerate(metadata["contributors"][:5]):
                    report.append(f"  - {contributor}")
                if len(metadata["contributors"]) > 5:
                    report.append(f"  - *and {len(metadata['contributors']) - 5} more*")
                    
            report.append(f"**Audit Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            report.append(f"")
        else:
            # Basic repository information (legacy format)
            report.extend([
                f"## Repository Information",
                f"",
                f"- **Repository:** `{repo_basename}`",
                f"- **Path:** `{repo_path}`",
                f"- **Branch:** `{branch}`",
                f"- **Audit Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                f"",
            ])
        
        # Executive summary section
        report.extend([
            f"## Executive Summary",
            f"",
            f"**Overall Score:** {total_score}/{total_possible} ({percentage:.1f}%)",
            f"**Rating:** {rating}",
            f"",
            f"## Category Scores",
            f"",
            f"| Category | Score | Max Points | Percentage |",
            f"|----------|-------|------------|------------|",
        ])
        
        # Add category scores to the table
        for category_name, category_data in results.items():
            score = category_data["score"]
            max_points = category_data["max_points"]
            category_percentage = (score / max_points) * 100 if max_points > 0 else 0
            
            display_name = category_name.replace("_", " ").title()
            report.append(f"| {display_name} | {score} | {max_points} | {category_percentage:.1f}% |")
        
        # Add detailed feedback for each category
        report.append(f"")
        report.append(f"## Detailed Feedback")
        report.append(f"")
        
        for category_name, category_data in results.items():
            display_name = category_name.replace("_", " ").title()
            score = category_data["score"]
            max_points = category_data["max_points"]
            feedback = category_data["feedback"]
            
            report.append(f"### {display_name} ({score}/{max_points})")
            report.append(f"")
            report.append(feedback)
            report.append(f"")
        
        # Add footer
        report.append(f"---")
        report.append(f"")
        report.append(f"Generated by NEAR Hackathon Auditor Tool")
        
        # Write the report to the output file
        try:
            with open(output_path, "w", encoding="utf-8") as f:
                f.write("\n".join(report))
            self.logger.info(f"Markdown report successfully written to {output_path}")
        except Exception as e:
            self.logger.error(f"Error writing Markdown report to {output_path}: {e}")
            raise

    def _get_rating(self, percentage: float) -> str:
        """
        Get a rating based on the percentage score.
        
        Args:
            percentage: Percentage score
            
        Returns:
            Rating as a string
        """
        if percentage >= 90:
            return "Excellent"
        elif percentage >= 80:
            return "Very Good"
        elif percentage >= 70:
            return "Good"
        elif percentage >= 60:
            return "Satisfactory"
        elif percentage >= 50:
            return "Needs Improvement"
        else:
            return "Poor"
