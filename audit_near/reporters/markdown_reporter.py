"""
Markdown reporter for audit results.

This module implements a reporter that generates a Markdown report from audit results.
"""

import logging
import os
from datetime import datetime
from typing import Dict, List, Tuple


class MarkdownReporter:
    """
    Reporter that generates Markdown reports from audit results.
    """
    
    def __init__(self):
        """
        Initialize the Markdown reporter.
        """
        self.logger = logging.getLogger(__name__)

    def generate_report(
        self,
        repo_path: str,
        branch: str,
        results: Dict[str, Dict],
        total_score: int,
        total_possible: int,
        output_path: str,
    ) -> None:
        """
        Generate a Markdown report from audit results.
        
        Args:
            repo_path: Path to the repository
            branch: Branch name
            results: Dictionary mapping category names to dictionaries containing score, max_points, and feedback
            total_score: Total score
            total_possible: Total possible score
            output_path: Path to write the report to
        """
        self.logger.info(f"Generating Markdown report to {output_path}")
        
        # Calculate percentage score
        percentage = (total_score / total_possible) * 100 if total_possible > 0 else 0
        
        # Determine overall rating
        rating = self._get_rating(percentage)
        
        # Generate report header
        report = [
            f"# NEAR Hackathon Project Audit Report",
            f"",
            f"## Repository Information",
            f"",
            f"- **Repository:** `{os.path.basename(repo_path)}`",
            f"- **Path:** `{repo_path}`",
            f"- **Branch:** `{branch}`",
            f"- **Audit Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"",
            f"## Executive Summary",
            f"",
            f"**Overall Score:** {total_score}/{total_possible} ({percentage:.1f}%)",
            f"**Rating:** {rating}",
            f"",
            f"## Category Scores",
            f"",
            f"| Category | Score | Max Points | Percentage |",
            f"|----------|-------|------------|------------|",
        ]
        
        # Add category scores to the table
        for category_name, category_data in results.items():
            score = category_data["score"]
            max_points = category_data["max_points"]
            category_percentage = (score / max_points) * 100 if max_points > 0 else 0
            
            display_name = category_name.replace("_", " ").title()
            report.append(f"| {display_name} | {score} | {max_points} | {category_percentage:.1f}% |")
        
        # Add detailed feedback for each category
        report.append(f"")
        report.append(f"## Detailed Feedback")
        report.append(f"")
        
        for category_name, category_data in results.items():
            display_name = category_name.replace("_", " ").title()
            score = category_data["score"]
            max_points = category_data["max_points"]
            feedback = category_data["feedback"]
            
            report.append(f"### {display_name} ({score}/{max_points})")
            report.append(f"")
            report.append(feedback)
            report.append(f"")
        
        # Add footer
        report.append(f"---")
        report.append(f"")
        report.append(f"Generated by NEAR Hackathon Auditor Tool")
        
        # Write the report to the output file
        try:
            with open(output_path, "w", encoding="utf-8") as f:
                f.write("\n".join(report))
            self.logger.info(f"Markdown report successfully written to {output_path}")
        except Exception as e:
            self.logger.error(f"Error writing Markdown report to {output_path}: {e}")
            raise

    def _get_rating(self, percentage: float) -> str:
        """
        Get a rating based on the percentage score.
        
        Args:
            percentage: Percentage score
            
        Returns:
            Rating as a string
        """
        if percentage >= 90:
            return "Excellent"
        elif percentage >= 80:
            return "Very Good"
        elif percentage >= 70:
            return "Good"
        elif percentage >= 60:
            return "Satisfactory"
        elif percentage >= 50:
            return "Needs Improvement"
        else:
            return "Poor"
